#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUM 1
#define SYM 2
#define FUN 3
#define NAV 4
#define SYS 5

&lt {
  tapping-term-ms = <300>;
  quick_tap_ms = <200>;
  flavor = "hold-preferred";
};

/ {
  chosen {
    zmk,matrix_transform = &skeletyl_transform;
  };

  behaviors {
    ls: left_shift {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
    };
    rs: right_shift {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
    };
    lm: left_hand_positional_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      require-prior-idle-ms = <100>;
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
      hold-trigger-on-release;
    };
    rm: right_hand_positional_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      require-prior-idle-ms = <100>;
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
      hold-trigger-on-release;
    };
  };

  keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
	&kp Q        &kp W       &kp E        &kp R          &kp T              &kp Y          &kp U         &kp I       &kp O       &kp P
	&lm LCTRL A  &lm LALT S  &lm LGUI D   &ls LSHFT F    &kp G              &kp H          &rs RSHFT J   &rm RGUI K  &rm LALT L  &rm RCTRL SEMI
	&kp Z        &kp X       &kp C        &kp V          &kp B              &kp N          &kp M         &kp COMMA   &kp DOT     &kp FSLH
	                         &lt SYS ESC  &lt NAV SPACE  &kp TAB            &lt SYM RET    &lt NUM BSPC  &lt FUN DEL
            >;
        };
        num_layer {
            bindings = <
	&kp LBKT     &kp N7      &kp N8       &kp N9         &kp RBKT           &trans         &trans        &trans      &trans      &trans
	&kp SQT      &kp N4      &kp N5       &kp N6         &kp EQUAL          &trans         &kp RSHFT     &kp RGUI    &kp LALT    &kp RCTRL
	&kp GRAVE    &kp N1      &kp N2       &kp N3         &kp BSLH           &trans         &trans        &trans      &trans      &trans
	                         &kp DOT      &kp N0         &kp MINUS          &trans         &trans        &trans
            >;
        };
        sym_layer {
            bindings = <
	&kp LBRC     &kp AMPS    &kp STAR     &kp LPAR       &kp RBRC           &trans         &trans        &trans      &trans      &trans
	&kp DQT      &kp DLLR    &kp PRCNT    &kp CARET      &kp PLUS           &trans         &kp RSHFT     &kp RGUI    &kp LALT    &kp RCTRL
	&kp TILDE    &kp EXCL    &kp AT       &kp HASH       &kp PIPE           &trans         &trans        &trans      &trans      &trans
	                         &kp LPAR     &kp RPAR       &kp UNDER                         &trans        &trans      &trans
            >;
        };
        fun_layer {
            bindings = <
	&kp F12      &kp F7      &kp F8       &kp F9         &kp PRINTSCREEN    &trans         &trans         &trans      &trans      &trans
	&kp F11      &kp F4      &kp F5       &kp F6         &kp SLCK           &trans         &kp RSHFT      &kp RGUI    &kp LALT    &kp RCTRL
	&kp F10      &kp F1      &kp F2       &kp F3         &kp PAUSE_BREAK    &trans         &trans         &trans      &trans      &trans
	                         &kp ESC      &kp SPACE      &kp TAB            &trans         &trans         &trans
            >;
        };
        nav_layer {
            bindings = <
	&trans       &trans      &trans       &trans         &trans             &kp LG(LS(Z))  &kp LG(V)      &kp LG(C)   &kp LG(X)   &kp LG(Z)
	&kp LCTRL    &kp LALT    &kp LGUI     &kp LSHFT      &trans             &kp CAPS       &kp LEFT       &kp DOWN    &kp UP      &kp RIGHT
	&kp LG(Z)    &kp LG(X)   &kp LG(C)    &kp LG(V)      &trans             &kp INS        &kp HOME       &kp PG_DN   &kp PG_UP   &kp END
	                         &trans       &trans         &trans             &kp RET        &kp BSPC       &kp DEL
            >;
        };
        sys_layer {
            bindings = <
	&sys_reset   &trans      &trans       &trans         &bt BT_CLR         &bt BT_NXT     &trans         &trans      &trans      &sys_reset
	&trans       &trans      &trans       &trans         &trans             &trans         &trans         &trans      &trans      &trans
	&trans       &trans      &trans       &trans         &trans             &trans         &trans         &trans      &trans      &trans
	                         &trans       &trans         &trans             &trans         &trans         &trans
            >;
        };
    };
};
